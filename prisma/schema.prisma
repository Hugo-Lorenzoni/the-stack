generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              String      @id @default(uuid())
  email           String      @unique
  name            String
  surname         String
  role            Role        @default(USER)
  cercle          Cercle?
  cercleVille     String?
  autreCercle     String?
  promo           Int?
  password        String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt @default(now())
}

model Event {
  id              String      @id @default(uuid())
  title           String
  date            DateTime    @db.Date @default(dbgenerated("(curdate())")) 
  // date            DateTime    @default(now())
  published       Boolean     @default(false)
  coverName       String
  coverUrl        String
  coverWidth      Int
  coverHeight     Int
  type            Type
  password        String?
  pinned          Boolean     @default(false)
  notes           String?     @db.Text
  publishedAt     DateTime?   
  photos          Photo[]
  sponsors        Sponsor[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt @default(now())
}

model Photo {
  id              String      @id @default(uuid())
  name            String
  url             String
  width           Int
  height          Int
  eventId         String
  event           Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt @default(now())

  @@index([eventId])
}

model Sponsor {
  id              String      @id @default(uuid())
  name            String
  url             String
  logoName        String
  logoUrl         String
  logoWidth       Int
  logoHeight      Int
  event           Event[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt @default(now())
}

model Video {
  id              String       @id
  url             String
  name            String
  date            DateTime
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt @default(now())
}

model EventToSponsor {
  A               String
  B               String

  @@unique([A, B], map: "_EventToSponsor_AB_unique")
  @@index([B], map: "_EventToSponsor_B_index")
  @@map("_EventToSponsor")
}

enum Role {
  USER
  WAITING
  BAPTISE
  ADMIN
}

enum Cercle {
  FPMS
  WAWA
  FMM
  CEFUC
  ISIC
  ISIMS
  ARCHI
  AUTRE
}

enum Type {
  BAPTISE
  OUVERT
  AUTRE
}
